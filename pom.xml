<?xml version="1.0" encoding="UTF-8"?>

<!-- There are 5 profiles: DEV,PROD,DEV-VSCODE,Webpack -->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>quanta</groupId>
	<artifactId>quanta</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>
	<name>Quanta</name>
	<description>Quanta - Content Platform for the Web</description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>

		<!--
			Tip: When upgrading this verison it's a good ideal to blow away
			the '.m2' hidden folder on your machine (maven cache) and also 
			enable this line in build.sh: "mvn dependency:sources", so you get
			all new source AND remove all the old stuff
		-->
		<version>2.6.1</version>
		<relativePath />
	</parent>

	<!-- ========== DEV PROFILE BEGIN ========== -->
	<profiles>
		<profile>
			<id>dev</id>
			<activation>
				<!-- Prior to 4/5/2019 we had this profile as the default and the 'dev-vscode' profile didn't exist (below), for
				more info on why there is dev and dev-vscode profiles see the long comment below that is
				above the dev-vscode profile.
				-->
				<activeByDefault>false</activeByDefault>
			</activation>
			<properties>

				<!-- The filename below can contain only 'dev' or 'prod'. If you're troubleshooting React/Redux performance for example,
				be sure to set to 'prod' so you aren't chasing performance problems what may not even exist in prod builds. -->
				<webpack.args>--config webpack.dev.js</webpack.args>

				<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
				<start-class>quanta.AppServer</start-class>
				<java.version>11</java.version>
			</properties>

			<dependencies>
				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-thymeleaf</artifactId>
				</dependency>

				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-aop</artifactId>
				</dependency>

				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-jersey</artifactId>
				</dependency>

				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-mail</artifactId>
				</dependency>

				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-web</artifactId>
					<exclusions>
						<exclusion>
							<groupId>org.hibernate</groupId>
							<artifactId>hibernate-validator</artifactId>
						</exclusion>
					</exclusions>
				</dependency>

				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-security</artifactId>
				</dependency>

				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-webflux</artifactId>
					<exclusions>
						<exclusion>
							<groupId>org.hibernate</groupId>
							<artifactId>hibernate-validator</artifactId>
						</exclusion>
					</exclusions>
				</dependency>

				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-test</artifactId>
					<scope>test</scope>
				</dependency>

				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-data-mongodb</artifactId>
				</dependency>

				<dependency>
					<groupId>commons-fileupload</groupId>
					<artifactId>commons-fileupload</artifactId>
					<version>1.5</version>
				</dependency>

				<dependency>
					<groupId>commons-codec</groupId>
					<artifactId>commons-codec</artifactId>
					<version>1.15</version>
				</dependency>

				<dependency>
					<groupId>org.apache.commons</groupId>
					<artifactId>commons-lang3</artifactId>
					<version>3.12.0</version>
				</dependency>

				<dependency>
					<groupId>org.apache.commons</groupId>
					<artifactId>commons-exec</artifactId>
					<version>1.3</version>
				</dependency>

				<dependency>
					<groupId>org.apache.commons</groupId>
					<artifactId>commons-compress</artifactId>
					<version>1.21</version>
				</dependency>

				<dependency>
					<groupId>org.apache.httpcomponents</groupId>
					<artifactId>httpclient</artifactId>
					<version>4.5.13</version>
				</dependency>

				<dependency>
					<groupId>org.apache.lucene</groupId>
					<artifactId>lucene-core</artifactId>
					<version>8.2.0</version>
				</dependency>

				<dependency>
					<groupId>org.apache.lucene</groupId>
					<artifactId>lucene-queryparser</artifactId>
					<version>8.2.0</version>
				</dependency>

				<dependency>
					<groupId>org.apache.tika</groupId>
					<artifactId>tika-core</artifactId>
					<version>1.22</version>
				</dependency>

				<dependency>
					<groupId>org.apache.tika</groupId>
					<artifactId>tika-parsers</artifactId>
					<!-- todo-0: for some reason the repository can't locate the latest version 2.4.1 ?? -->
					<version>1.28.4</version>
				</dependency>

				<dependency>
					<groupId>org.jsoup</groupId>
					<artifactId>jsoup</artifactId>
					<version>1.15.3</version>
				</dependency>

				<dependency>
					<groupId>com.rometools</groupId>
					<artifactId>rome</artifactId>
					<version>1.16.0</version>
				</dependency>

				<dependency>
					<groupId>com.rometools</groupId>
					<artifactId>rome-modules</artifactId>
					<version>1.16.0</version>
				</dependency>

				<dependency>
					<groupId>com.googlecode.owasp-java-html-sanitizer</groupId>
					<artifactId>owasp-java-html-sanitizer</artifactId>
					<version>20220608.1</version>
				</dependency>

				<dependency>
					<groupId>org.apache.pdfbox</groupId>
					<artifactId>pdfbox</artifactId>
					<version>2.0.26</version>
				</dependency>

				<dependency>
					<groupId>com.vladsch.flexmark</groupId>
					<artifactId>flexmark-all</artifactId>
					<version>0.62.2</version>
				</dependency>

				<dependency>
					<groupId>joda-time</groupId>
					<artifactId>joda-time</artifactId>
					<version>2.10</version>
				</dependency>

				<dependency>
					<groupId>javax.validation</groupId>
					<artifactId>validation-api</artifactId>
					<version>2.0.1.Final</version>
				</dependency>

				<dependency>
					<groupId>com.fasterxml</groupId>
					<artifactId>jackson-module-json-org</artifactId>
					<version>0.9.1</version>
				</dependency>

				<dependency>
					<groupId>com.fasterxml.jackson.dataformat</groupId>
					<artifactId>jackson-dataformat-yaml</artifactId>
				</dependency>

				<dependency>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-log4j12</artifactId>
				</dependency>

				<dependency>
					<groupId>org.projectlombok</groupId>
					<artifactId>lombok</artifactId>
					<version>1.18.24</version>
				</dependency>
			</dependencies>

			<build>
				<filters>
					<filter>src/main/resources/application.properties</filter>
				</filters>

				<resources>
					<resource>
						<directory>src/main/resources</directory>

						<excludes>
							<exclude>public/node_modules/**</exclude>
							<exclude>server/node_modules/**</exclude>
							<exclude>public/node/**</exclude>
						</excludes>

						<!-- I have resource filtering disabled for now because i don't need it, but if you turn it back on don't forget
				to add 'resources:resources' to the maven command for inside<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-compiler-plugin</artifactId>
						<version>3.8.0</version>
						<configuration>
							<source>9</source>
							<target>9</target>
						</configuration>
					</plugin> VSCode AND also your prod builder shell script!!!
				<filtering>true</filtering>
				-->
					</resource>
				</resources>

				<plugins>
					<!--
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-install-plugin</artifactId>
						<version>2.5.1</version>
						<configuration>
							<groupId>javax.validation</groupId>
							<artifactId>validation-api</artifactId>
							<version>1.1.0.Final</version>
							<packaging>jar</packaging>
							
							
							<file>${project.basedir}/jar/validation-api-1.1.0.Final.jar</file>
							<generatePom>true</generatePom>
						</configuration>
						<executions>
							<execution>
								<id>install-jar-lib</id>
								<goals>
									<goal>install-file</goal>
								</goals>
								<phase>validate</phase>
							</execution>
						</executions>
					</plugin>
-->

					<!-- uncomment this to start generating javadocs. -->
					<!-- <plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-javadoc-plugin</artifactId>
						<version>3.3.1</version>
						<configuration>
							<reportOutputDirectory>./JavaDocs</reportOutputDirectory>
							<destDir>JavaDocs</destDir>
						</configuration>
						<executions>
							<execution>
								<id>attach-javadocs</id>
								<goals>
									<goal>jar</goal>
								</goals>
							</execution>
						</executions>
					</plugin> -->

					<plugin>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-maven-plugin</artifactId>
						<configuration>
							<layout>ZIP</layout>
						</configuration>
					</plugin>
					<!-- 
				WARNING: It appears that only ONE exec-maven-plugin runs. Having two of these plugins won't work, because it ends up 
				only running one of them. Don't know why. So just put ALL scripting stuff in this one file
				-->

					<!--
			With this plugin commented out you must also remove 'exec:exec' from the maven build command line (goals)
			and of course put 'exec:exec' back in if you are doing the exec-maven-plugin.
			
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<configuration>
					<executable>./run-webpack.sh</executable>
					<workingDirectory>./</workingDirectory>
				</configuration>
			</plugin>
			-->

					<plugin>
						<groupId>com.github.eirslett</groupId>
						<artifactId>frontend-maven-plugin</artifactId>
						<version>1.12.0</version>

						<configuration>
							<workingDirectory>src/main/resources/public</workingDirectory>
						</configuration>

						<executions>

							<!-- Removed only to speed up builds -->
							<!-- <execution>
								<id>install-node-and-npm</id>
								<goals>
									<goal>install-node-and-npm</goal>
								</goals>
								<configuration>
									<nodeVersion>v18.16.0</nodeVersion>
								</configuration>
								<phase>generate-resources</phase>
							</execution> 
							
							<execution>
								<id>npm-install</id>
								<goals>
									<goal>npm</goal>
								</goals>
								<phase>generate-resources</phase>
								<configuration>
									<arguments>install</arguments>
								</configuration>
							</execution> -->

							<execution>
								<id>webpack-build</id>
								<goals>
									<goal>webpack</goal>
								</goals>

								<!-- optional: the default phase is "generate-resources" -->
								<phase>generate-resources</phase>

								<configuration>
									<!-- optional: if not specified, it will run webpack's default
        							build (and you can remove this whole <configuration> section.) -->
									<arguments>${webpack.args}</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin>

				</plugins>
			</build>
		</profile>

		<!-- 
		This profile is for the purpose of updating /target/classes only so we can do a rapid server reload/iteration 
		
		========== JAVA-COMPILE PROFILE BEGIN ========== -->

		<profile>
			<id>java-compile</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<properties>
				<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
				<start-class>quanta.AppServer</start-class>
				<java.version>11</java.version>
			</properties>

			<dependencies>
				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-thymeleaf</artifactId>
				</dependency>

				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-aop</artifactId>
				</dependency>

				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-jersey</artifactId>
				</dependency>

				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-mail</artifactId>
				</dependency>

				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-web</artifactId>
					<exclusions>
						<exclusion>
							<groupId>org.hibernate</groupId>
							<artifactId>hibernate-validator</artifactId>
						</exclusion>
					</exclusions>
				</dependency>

				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-security</artifactId>
				</dependency>

				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-webflux</artifactId>
					<exclusions>
						<exclusion>
							<groupId>org.hibernate</groupId>
							<artifactId>hibernate-validator</artifactId>
						</exclusion>
					</exclusions>
				</dependency>

				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-test</artifactId>
					<scope>test</scope>
				</dependency>

				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-data-mongodb</artifactId>
				</dependency>

				<dependency>
					<groupId>commons-fileupload</groupId>
					<artifactId>commons-fileupload</artifactId>
					<version>1.5</version>
				</dependency>

				<dependency>
					<groupId>commons-codec</groupId>
					<artifactId>commons-codec</artifactId>
					<version>1.15</version>
				</dependency>

				<dependency>
					<groupId>org.apache.commons</groupId>
					<artifactId>commons-lang3</artifactId>
					<version>3.12.0</version>
				</dependency>

				<dependency>
					<groupId>org.apache.commons</groupId>
					<artifactId>commons-exec</artifactId>
					<version>1.3</version>
				</dependency>

				<dependency>
					<groupId>org.apache.commons</groupId>
					<artifactId>commons-compress</artifactId>
					<version>1.21</version>
				</dependency>

				<dependency>
					<groupId>org.apache.httpcomponents</groupId>
					<artifactId>httpclient</artifactId>
					<version>4.5.13</version>
				</dependency>

				<dependency>
					<groupId>org.apache.lucene</groupId>
					<artifactId>lucene-core</artifactId>
					<version>8.2.0</version>
				</dependency>

				<dependency>
					<groupId>org.apache.lucene</groupId>
					<artifactId>lucene-queryparser</artifactId>
					<version>8.2.0</version>
				</dependency>

				<dependency>
					<groupId>org.apache.tika</groupId>
					<artifactId>tika-core</artifactId>
					<version>1.22</version>
				</dependency>

				<dependency>
					<groupId>org.apache.tika</groupId>
					<artifactId>tika-parsers</artifactId>
					<!-- todo-0: for some reason the repository can't locate the latest version 2.4.1 ?? -->
					<version>1.28.4</version>
				</dependency>

				<dependency>
					<groupId>org.jsoup</groupId>
					<artifactId>jsoup</artifactId>
					<version>1.15.3</version>
				</dependency>

				<dependency>
					<groupId>com.rometools</groupId>
					<artifactId>rome</artifactId>
					<version>1.16.0</version>
				</dependency>

				<dependency>
					<groupId>com.rometools</groupId>
					<artifactId>rome-modules</artifactId>
					<version>1.16.0</version>
				</dependency>

				<dependency>
					<groupId>com.googlecode.owasp-java-html-sanitizer</groupId>
					<artifactId>owasp-java-html-sanitizer</artifactId>
					<version>20220608.1</version>
				</dependency>

				<dependency>
					<groupId>org.apache.pdfbox</groupId>
					<artifactId>pdfbox</artifactId>
					<version>2.0.26</version>
				</dependency>

				<dependency>
					<groupId>com.vladsch.flexmark</groupId>
					<artifactId>flexmark-all</artifactId>
					<version>0.62.2</version>
				</dependency>

				<dependency>
					<groupId>joda-time</groupId>
					<artifactId>joda-time</artifactId>
					<version>2.10</version>
				</dependency>

				<dependency>
					<groupId>javax.validation</groupId>
					<artifactId>validation-api</artifactId>
					<version>2.0.1.Final</version>
				</dependency>

				<dependency>
					<groupId>com.fasterxml</groupId>
					<artifactId>jackson-module-json-org</artifactId>
					<version>0.9.1</version>
				</dependency>

				<dependency>
					<groupId>com.fasterxml.jackson.dataformat</groupId>
					<artifactId>jackson-dataformat-yaml</artifactId>
				</dependency>

				<dependency>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-log4j12</artifactId>
				</dependency>

				<dependency>
					<groupId>org.projectlombok</groupId>
					<artifactId>lombok</artifactId>
					<version>1.18.24</version>
				</dependency>

			</dependencies>

			<build>
				<plugins>
					<plugin>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-maven-plugin</artifactId>
						<!-- <configuration>
							<layout>ZIP</layout>
						</configuration> -->
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- ========== DEV-VSCODE PROFILE BEGIN ==========	-->
		<!-- This profile 'dev-vscode' is the one we activate by default so that when opening in VSCode we don't run into the
		bug that exists where 'node' process will HANG forever with maxed out CPU usage. This profile is identical to the 'dev' 
		profile except for omitting the webpack part which causes this bug/hang. All profiles work just fine with or without
		webpack when run on the command line, but it seems VSCode is not able to run any webpack without this bug happening, so the 
		solution is just that we never run any webpack from inside VSCode
		
		Interestingly, this bug only happens then VSCode is automatically running the the build behind the scenes just because you
		opened the project and it wants to run a build. Running from a tasks.json entry that runs './build.sh', from the Terminal 
		menu inside VSCode works just fine.

		UPDATE: There ended up being an additional need for this profile to the above, which is the fact that it can compile the Java
		and run the typescript-generator-maven-plugin to generate the generated TypeScript Interfaces, without WebPack trying to run first
	    which can potentially have outdated (old) generated file, and fail.
		-->
		<profile>
			<id>dev-vscode</id>
			<activation>
				<!-- I think i added this 'default' designation so that IDEs can build always even when no specific build config is being run 
				
				Update: I set this activeByDefaut to 'false' on 4/6/2019, because I noticed the webpack process was hanging up in 'node' somehow, 
				and the 'node' process in linux was sitting ther burning up 155% CPU forever, in a loop. This stops VSCode from causing this to happen.
				Somehow there is a bug in that scenario. VSCode detecting this and trying to run a build once you just merely open your IDE.
				-->
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
				<start-class>quanta.AppServer</start-class>
				<java.version>11</java.version>
			</properties>

			<dependencies>
				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-thymeleaf</artifactId>
				</dependency>

				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-aop</artifactId>
				</dependency>

				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-jersey</artifactId>
				</dependency>

				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-mail</artifactId>
				</dependency>

				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-web</artifactId>
					<exclusions>
						<exclusion>
							<groupId>org.hibernate</groupId>
							<artifactId>hibernate-validator</artifactId>
						</exclusion>
					</exclusions>
				</dependency>

				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-security</artifactId>
				</dependency>

				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-webflux</artifactId>
					<exclusions>
						<exclusion>
							<groupId>org.hibernate</groupId>
							<artifactId>hibernate-validator</artifactId>
						</exclusion>
					</exclusions>
				</dependency>

				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-test</artifactId>
					<scope>test</scope>
				</dependency>

				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-data-mongodb</artifactId>
				</dependency>

				<dependency>
					<groupId>commons-fileupload</groupId>
					<artifactId>commons-fileupload</artifactId>
					<version>1.5</version>
				</dependency>

				<dependency>
					<groupId>commons-codec</groupId>
					<artifactId>commons-codec</artifactId>
					<version>1.15</version>
				</dependency>

				<dependency>
					<groupId>org.apache.commons</groupId>
					<artifactId>commons-lang3</artifactId>
					<version>3.12.0</version>
				</dependency>

				<dependency>
					<groupId>org.apache.commons</groupId>
					<artifactId>commons-exec</artifactId>
					<version>1.3</version>
				</dependency>

				<dependency>
					<groupId>org.apache.commons</groupId>
					<artifactId>commons-compress</artifactId>
					<version>1.21</version>
				</dependency>

				<dependency>
					<groupId>org.apache.httpcomponents</groupId>
					<artifactId>httpclient</artifactId>
					<version>4.5.13</version>
				</dependency>

				<dependency>
					<groupId>org.apache.lucene</groupId>
					<artifactId>lucene-core</artifactId>
					<version>8.2.0</version>
				</dependency>

				<dependency>
					<groupId>org.apache.lucene</groupId>
					<artifactId>lucene-queryparser</artifactId>
					<version>8.2.0</version>
				</dependency>

				<dependency>
					<groupId>org.apache.tika</groupId>
					<artifactId>tika-core</artifactId>
					<version>1.22</version>
				</dependency>

				<dependency>
					<groupId>org.apache.tika</groupId>
					<artifactId>tika-parsers</artifactId>
					<!-- todo-0: for some reason the repository can't locate the latest version 2.4.1 ?? -->
					<version>1.28.4</version>
				</dependency>

				<dependency>
					<groupId>org.jsoup</groupId>
					<artifactId>jsoup</artifactId>
					<version>1.15.3</version>
				</dependency>

				<dependency>
					<groupId>com.rometools</groupId>
					<artifactId>rome</artifactId>
					<version>1.16.0</version>
				</dependency>

				<dependency>
					<groupId>com.rometools</groupId>
					<artifactId>rome-modules</artifactId>
					<version>1.16.0</version>
				</dependency>

				<dependency>
					<groupId>com.googlecode.owasp-java-html-sanitizer</groupId>
					<artifactId>owasp-java-html-sanitizer</artifactId>
					<version>20220608.1</version>
				</dependency>

				<dependency>
					<groupId>org.apache.pdfbox</groupId>
					<artifactId>pdfbox</artifactId>
					<version>2.0.26</version>
				</dependency>

				<dependency>
					<groupId>com.vladsch.flexmark</groupId>
					<artifactId>flexmark-all</artifactId>
					<version>0.62.2</version>
				</dependency>

				<dependency>
					<groupId>joda-time</groupId>
					<artifactId>joda-time</artifactId>
					<version>2.10</version>
				</dependency>

				<dependency>
					<groupId>javax.validation</groupId>
					<artifactId>validation-api</artifactId>
					<version>2.0.1.Final</version>
				</dependency>

				<dependency>
					<groupId>com.fasterxml</groupId>
					<artifactId>jackson-module-json-org</artifactId>
					<version>0.9.1</version>
				</dependency>

				<dependency>
					<groupId>com.fasterxml.jackson.dataformat</groupId>
					<artifactId>jackson-dataformat-yaml</artifactId>
				</dependency>

				<dependency>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-log4j12</artifactId>
				</dependency>

				<dependency>
					<groupId>org.projectlombok</groupId>
					<artifactId>lombok</artifactId>
					<version>1.18.24</version>
				</dependency>

			</dependencies>

			<build>
				<filters>
					<filter>src/main/resources/application.properties</filter>
				</filters>

				<resources>
					<resource>
						<directory>src/main/resources</directory>

						<excludes>
							<exclude>public/node_modules/**</exclude>
							<exclude>server/node_modules/**</exclude>
							<exclude>public/node/**</exclude>
						</excludes>

						<!-- I have resource filtering disabled for now because i don't need it, but if you turn it back on don't forget
				to add 'resources:resources' to the maven command for inside<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-compiler-plugin</artifactId>
						<version>3.8.0</version>
						<configuration>
							<source>9</source>
							<target>9</target>
						</configuration>
					</plugin> VSCode AND also your prod builder shell script!!!
				<filtering>true</filtering>
				-->
					</resource>
				</resources>

				<plugins>
					<plugin>
						<groupId>cz.habarta.typescript-generator</groupId>
						<artifactId>typescript-generator-maven-plugin</artifactId>
						<version>2.22.595</version>
						<executions>
							<execution>
								<id>generate</id>
								<goals>
									<goal>generate</goal>
								</goals>
								<phase>process-classes</phase>
							</execution>
						</executions>
						<configuration>
							<optionalAnnotations>
								<annotation>javax.annotation.Nullable</annotation>
							</optionalAnnotations>
							<jsonLibrary>jackson2</jsonLibrary>

							<!-- Supposedly this will allow @JsonProperty(required = false) in the java to put a '?' after the param
								but unfortunately it doesn't default to 'true' as one would expect, so for now I'll leave it out
							    to get maximal typesafety
							<optionalProperties>useLibraryDefinition</optionalProperties>
							-->

							<classPatterns>
								<pattern>quanta.model.client.**</pattern>
								<pattern>quanta.request.**</pattern>
								<pattern>quanta.response.**</pattern>
							</classPatterns>
							<outputKind>module</outputKind>
							<outputFile>src/main/resources/public/ts/JavaIntf.d.ts</outputFile>
							<mapEnum>asEnum</mapEnum>
							<jackson2Configuration>
								<enumsUsingToString>true</enumsUsingToString>
							</jackson2Configuration>
							<noFileComment>true</noFileComment>
						</configuration>
					</plugin>

					<!--
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-install-plugin</artifactId>
						<version>2.5.1</version>
						<configuration>
							<groupId>javax.validation</groupId>
							<artifactId>validation-api</artifactId>
							<version>1.1.0.Final</version>
							<packaging>jar</packaging>
							
							
							<file>${project.basedir}/jar/validation-api-1.1.0.Final.jar</file>
							<generatePom>true</generatePom>
						</configuration>
						<executions>
							<execution>
								<id>install-jar-lib</id>
								<goals>
									<goal>install-file</goal>
								</goals>
								<phase>validate</phase>
							</execution>
						</executions>
					</plugin>
-->

					<plugin>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-maven-plugin</artifactId>
					</plugin>
					<!-- 
				WARNING: It appears that only ONE exec-maven-plugin runs. Having two of these plugins won't work, because it ends up 
				only running one of them. Don't know why. So just put ALL scripting stuff in this one file
				-->

					<!--
			With this plugin commented out you must also remove 'exec:exec' from the maven build command line (goals)
			and of course put 'exec:exec' back in if you are doing the exec-maven-plugin.
			
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<configuration>
					<executable>./run-webpack.sh</executable>
					<workingDirectory>./</workingDirectory>
				</configuration>
			</plugin>
			-->
					<plugin>
						<groupId>com.github.eirslett</groupId>
						<artifactId>frontend-maven-plugin</artifactId>
						<!-- Use the latest released version:
				https://repo1.maven.org/maven2/com/github/eirslett/frontend-maven-plugin/ -->
						<version>1.12.0</version>

						<configuration>
							<workingDirectory>src/main/resources/public</workingDirectory>
						</configuration>

						<executions>
							<execution>
								<!-- optional: you don't really need execution ids, but it looks nice in your build log. -->
								<id>install-node-and-npm</id>
								<goals>
									<goal>install-node-and-npm</goal>
								</goals>
								<configuration>
									<nodeVersion>v18.16.0</nodeVersion>

									<!-- optional: with node version greater than 4.0.0 will use npm provided by node distribution 
									<npmVersion>5.8.0</npmVersion>
									-->

									<!-- optional: where to download node and npm from. Defaults to https://nodejs.org/dist/ 
									<downloadRoot>http://myproxy.example.org/nodejs/</downloadRoot>
									-->
								</configuration>
								<!-- optional: default phase is "generate-resources" -->
								<phase>generate-resources</phase>
							</execution>
							<execution>
								<id>npm-install</id>
								<goals>
									<goal>npm</goal>
								</goals>

								<!-- optional: default phase is "generate-resources" -->
								<phase>generate-resources</phase>

								<configuration>
									<!-- optional: The default argument is actually
									"install", so unless you need to run some other npm command,
									you can remove this whole <configuration> section.
									-->
									<arguments>install</arguments>
								</configuration>
							</execution>

						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- ========== PROD PROFILE BEGIN ========== -->
		<profile>
			<id>prod</id>
			<properties>
				<webpack.args>--mode production --config webpack.prod.js</webpack.args>
				<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
				<start-class>quanta.AppServer</start-class>
				<java.version>11</java.version>
			</properties>

			<dependencies>
				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-thymeleaf</artifactId>
				</dependency>

				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-aop</artifactId>
				</dependency>

				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-jersey</artifactId>
				</dependency>

				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-mail</artifactId>
				</dependency>

				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-web</artifactId>
					<exclusions>
						<exclusion>
							<groupId>org.hibernate</groupId>
							<artifactId>hibernate-validator</artifactId>
						</exclusion>
					</exclusions>
				</dependency>

				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-security</artifactId>
				</dependency>

				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-webflux</artifactId>
					<exclusions>
						<exclusion>
							<groupId>org.hibernate</groupId>
							<artifactId>hibernate-validator</artifactId>
						</exclusion>
					</exclusions>
				</dependency>

				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-test</artifactId>
					<scope>test</scope>
				</dependency>

				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-data-mongodb</artifactId>
				</dependency>

				<dependency>
					<groupId>commons-fileupload</groupId>
					<artifactId>commons-fileupload</artifactId>
					<version>1.5</version>
				</dependency>

				<dependency>
					<groupId>commons-codec</groupId>
					<artifactId>commons-codec</artifactId>
					<version>1.15</version>
				</dependency>

				<dependency>
					<groupId>org.apache.commons</groupId>
					<artifactId>commons-lang3</artifactId>
					<version>3.12.0</version>
				</dependency>

				<dependency>
					<groupId>org.apache.commons</groupId>
					<artifactId>commons-exec</artifactId>
					<version>1.3</version>
				</dependency>

				<dependency>
					<groupId>org.apache.commons</groupId>
					<artifactId>commons-compress</artifactId>
					<version>1.21</version>
				</dependency>

				<dependency>
					<groupId>org.apache.httpcomponents</groupId>
					<artifactId>httpclient</artifactId>
					<version>4.5.13</version>
				</dependency>

				<dependency>
					<groupId>org.apache.lucene</groupId>
					<artifactId>lucene-core</artifactId>
					<version>8.2.0</version>
				</dependency>

				<dependency>
					<groupId>org.apache.lucene</groupId>
					<artifactId>lucene-queryparser</artifactId>
					<version>8.2.0</version>
				</dependency>

				<dependency>
					<groupId>org.apache.tika</groupId>
					<artifactId>tika-core</artifactId>
					<version>1.22</version>
				</dependency>

				<dependency>
					<groupId>org.apache.tika</groupId>
					<artifactId>tika-parsers</artifactId>
					<!-- todo-0: for some reason the repository can't locate the latest version 2.4.1 ?? -->
					<version>1.28.4</version>
				</dependency>

				<dependency>
					<groupId>org.jsoup</groupId>
					<artifactId>jsoup</artifactId>
					<version>1.15.3</version>
				</dependency>

				<dependency>
					<groupId>com.rometools</groupId>
					<artifactId>rome</artifactId>
					<version>1.16.0</version>
				</dependency>

				<dependency>
					<groupId>com.rometools</groupId>
					<artifactId>rome-modules</artifactId>
					<version>1.16.0</version>
				</dependency>

				<dependency>
					<groupId>com.googlecode.owasp-java-html-sanitizer</groupId>
					<artifactId>owasp-java-html-sanitizer</artifactId>
					<version>20220608.1</version>
				</dependency>

				<dependency>
					<groupId>org.apache.pdfbox</groupId>
					<artifactId>pdfbox</artifactId>
					<version>2.0.26</version>
				</dependency>

				<dependency>
					<groupId>com.vladsch.flexmark</groupId>
					<artifactId>flexmark-all</artifactId>
					<version>0.62.2</version>
				</dependency>

				<dependency>
					<groupId>joda-time</groupId>
					<artifactId>joda-time</artifactId>
					<version>2.10</version>
				</dependency>

				<dependency>
					<groupId>javax.validation</groupId>
					<artifactId>validation-api</artifactId>
					<version>2.0.1.Final</version>
				</dependency>

				<dependency>
					<groupId>com.fasterxml</groupId>
					<artifactId>jackson-module-json-org</artifactId>
					<version>0.9.1</version>
				</dependency>

				<dependency>
					<groupId>com.fasterxml.jackson.dataformat</groupId>
					<artifactId>jackson-dataformat-yaml</artifactId>
				</dependency>

				<dependency>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-log4j12</artifactId>
				</dependency>

				<dependency>
					<groupId>org.projectlombok</groupId>
					<artifactId>lombok</artifactId>
					<version>1.18.24</version>
				</dependency>

			</dependencies>

			<build>
				<filters>
					<filter>src/main/resources/application.properties</filter>
				</filters>

				<resources>
					<resource>
						<directory>src/main/resources</directory>

						<excludes>
							<exclude>public/node_modules/**</exclude>
							<exclude>server/node_modules/**</exclude>
							<exclude>public/node/**</exclude>
						</excludes>

						<!-- I have resource filtering disabled for now because i don't need it, but if you turn it back on don't forget
				to add 'resources:resources' to the maven command for inside VSCode AND also your prod builder shell script!!!
				<filtering>true</filtering>
				-->
					</resource>
				</resources>

				<plugins>
					<!--
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-install-plugin</artifactId>
						<version>2.5.1</version>
						<configuration>
							<groupId>javax.validation</groupId>
							<artifactId>validation-api</artifactId>
							<version>1.1.0.Final</version>
							<packaging>jar</packaging>
							
							
							<file>${project.basedir}/jar/validation-api-1.1.0.Final.jar</file>
							<generatePom>true</generatePom>
						</configuration>
						<executions>
							<execution>
								<id>install-jar-lib</id>
								<goals>
									<goal>install-file</goal>
								</goals>
								<phase>validate</phase>
							</execution>
						</executions>
					</plugin>
	-->

					<plugin>
						<groupId>org.springframework.boot</groupId>
						<artifactId>spring-boot-maven-plugin</artifactId>
					</plugin>
					<!-- 
				WARNING: It appears that only ONE exec-maven-plugin runs. Having two of these plugins won't work, because it ends up 
				only running one of them. Don't know why. So just put ALL scripting stuff in this one file
				-->

					<!--
			With this plugin commented out you must also remove 'exec:exec' from the maven build command line (goals)
			and of course put 'exec:exec' back in if you are doing the exec-maven-plugin.
			
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<configuration>
					<executable>./run-webpack.sh</executable>
					<workingDirectory>./</workingDirectory>
				</configuration>
			</plugin>
			-->
					<plugin>
						<groupId>com.github.eirslett</groupId>
						<artifactId>frontend-maven-plugin</artifactId>
						<!-- Use the latest released version:
				https://repo1.maven.org/maven2/com/github/eirslett/frontend-maven-plugin/ -->
						<version>1.12.0</version>

						<configuration>
							<workingDirectory>src/main/resources/public</workingDirectory>
						</configuration>

						<executions>
							<execution>
								<!-- optional: you don't really need execution ids, but it looks nice in your build log. -->
								<id>install-node-and-npm</id>
								<goals>
									<goal>install-node-and-npm</goal>
								</goals>
								<configuration>
									<nodeVersion>v18.16.0</nodeVersion>

									<!-- optional: with node version greater than 4.0.0 will use npm provided by node distribution 
							<npmVersion>5.8.0</npmVersion>
							-->

									<!-- optional: where to download node and npm from. Defaults to https://nodejs.org/dist/ 
							<downloadRoot>http://myproxy.example.org/nodejs/</downloadRoot>
							-->
								</configuration>
								<!-- optional: default phase is "generate-resources" -->
								<phase>generate-resources</phase>
							</execution>
							<execution>
								<id>npm-install</id>
								<goals>
									<goal>npm</goal>
								</goals>

								<!-- optional: default phase is "generate-resources" -->
								<phase>generate-resources</phase>

								<configuration>
									<!-- optional: The default argument is actually
							"install", so unless you need to run some other npm command,
							you can remove this whole <configuration> section.
							-->
									<arguments>install</arguments>
								</configuration>
							</execution>
							<execution>
								<id>webpack-build</id>
								<goals>
									<goal>webpack</goal>
								</goals>

								<!-- optional: the default phase is "generate-resources" -->
								<phase>generate-resources</phase>

								<configuration>
									<!-- optional: if not specified, it will run webpack's default
        					build (and you can remove this whole <configuration> section.) -->
									<arguments>${webpack.args}</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>

		</profile>

		<!-- ========== WEBPACK PROFILE BEGIN ========== -->
		<!-- This profile does the minimal work of just compiling TS files, so that we can run this profile, which is extremely fast (couple of seconds), 
		and then be able to simply refresh the browser and see the changes immediately without doing an actual full maven build -->
		<profile>
			<id>webpack</id>

			<properties>
				<webpack.args>--config webpack.dev.js</webpack.args>
				<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
				<start-class>quanta.AppServer</start-class>
				<java.version>11</java.version>
			</properties>

			<dependencies></dependencies>

			<build>
				<filters>
					<filter>src/main/resources/application.properties</filter>
				</filters>

				<resources>

					<resource>
						<directory>src/main/resources</directory>

						<excludes>
							<exclude>public/node_modules/**</exclude>
							<exclude>server/node_modules/**</exclude>
							<exclude>public/node/**</exclude>
						</excludes>

						<!-- I have resource filtering disabled for now because i don't need it, but if you turn it back on don't forget
				to add 'resources:resources' to the maven command for inside VSCode AND also your prod builder shell script!!!
				<filtering>true</filtering>
				-->
					</resource>
				</resources>

				<plugins>

					<!-- 
						WARNING: It appears that only ONE exec-maven-plugin runs. Having two of these plugins won't work, because it ends up 
						only running one of them. Don't know why. So just put ALL scripting stuff in this one file
						-->

					<!--
					With this plugin commented out you must also remove 'exec:exec' from the maven build command line (goals)
					and of course put 'exec:exec' back in if you are doing the exec-maven-plugin.
					
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<configuration>
							<executable>./run-webpack.sh</executable>
							<workingDirectory>./</workingDirectory>
						</configuration>
					</plugin>
					-->
					<plugin>
						<groupId>com.github.eirslett</groupId>
						<artifactId>frontend-maven-plugin</artifactId>
						<!-- Use the latest released version:
						https://repo1.maven.org/maven2/com/github/eirslett/frontend-maven-plugin/ -->
						<version>1.12.0</version>

						<configuration>
							<workingDirectory>src/main/resources/public</workingDirectory>
						</configuration>

						<executions>
							<execution>
								<id>webpack-build</id>
								<goals>
									<goal>webpack</goal>
								</goals>

								<!-- optional: the default phase is "generate-resources" -->
								<phase>generate-resources</phase>

								<configuration>
									<!-- optional: if not specified, it will run webpack's default
        							build (and you can remove this whole <configuration> section.) -->
									<arguments>${webpack.args}</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
