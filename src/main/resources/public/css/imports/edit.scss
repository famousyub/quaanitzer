.textTypeContent {
    margin: 12px 0px 12px 12px;
    padding: 8px;
    border: 1px solid $nodeBorderBottomColor;
    background-color: #17202A;
}

.preWordWrap {
    // overflow-x: auto; //<--- highly upvoted stack overflow didn't have this.
    white-space: pre-wrap;
    white-space: -moz-pre-wrap;
    white-space: -pre-wrap;
    white-space: -o-pre-wrap;
    word-wrap: break-word;
}

.mkCont table,
th,
td {
    border: 1px solid $nodeBorderBottomColor;
    border-collapse: collapse;
}

.mkCont th,
td {
    padding: $tinyGap;
}

.fileNameField {
    width: 12em;
    min-width: 3em;
}

.displayNameTextField {
    max-width: 40rem;
}

.textareaMin4 {
    font-family: inherit;
    min-height: 4rem;
}

.fontInherit {
    font-family: inherit;
}

.mkDownCodespan {
    color: var(--bs-green);
    word-wrap: break-word;
    cursor: pointer;
    font-size: 110%;

    // I saw these in browser elements view but not sure if we need them.
    // direction: ltr /* rtl:ignore */;
    // unicode-bidi: bidi-override;
}

.nostrLink {
    cursor: pointer;
    color: white;
    background-color: purple;
    border: 1px solid gray;
    border-radius: 3px;
    padding: 2px 3px 2px 3px;
    font-size: 110%;
    text-decoration: none;
    margin: 2px;
}

.preTextarea {
    //WARNING: Setting a font family here (other than inherit) causes noticeable flicker whenever react re-renders (during focus and blur eventing), 
    //but the solution appeared to be to set the font on the PARENT div of an input control (to monospace), and then use 'inherit' here as the actual font-family.
    font-family: inherit;
    background-color: #1b2631 !important;
    border-radius: 0px !important;
    border: 1px solid gray;
}

.preTextField {
    //WARNING: Setting a font family here (other than inherit) causes noticeable flicker whenever react re-renders (during focus and blur eventing), 
    //but the solution appeared to be to set the font on the PARENT div of an input control (to monospace), and then use 'inherit' here as the actual font-family.
    padding: 5px 5px 5px 10px;
    font-family: inherit;
    border-radius: 0px !important;
    border: 1px solid gray;
}

.textField {
    font-family: "monospace";
}

/* We use a tiny gap for password text fields so that the 'Show Password" button can be very close below */
.passwordTextField {
    margin-bottom: $tinyGap;
}

.typeSearchField {
    margin-bottom: $smallGap;
}

.mkCont {
    padding-top: .5rem;
    padding-left: 1.2rem;
    padding-bottom: 1.2rem;
    padding-right: 1rem;
}

.mkCont h1 {
    font-size: 2rem;
}

.mkCont h2 {
    font-size: 1.9rem;
}

.mkCont h3 {
    font-size: 1.8rem;
}

.mkCont h4 {
    font-size: 1.7rem;
}

.mkCont h5 {
    font-size: 1.6rem;
}

.mkCont h6 {
    font-size: 1.5rem;
}

// without this any multi-paragraph text that our markdown renders always has too much spacing at the bottom. We already specify the
// amount of spacing we want in the mkCont style itself so we stop this from messing that up with this 'last-child' style
.mkCont p:last-child {
    margin-bottom: 0;
}

// Note: Don't try border-radius here, becasue that's ugly with horizontal scrollbar (corner sticks out over round edge)
.mkCont kbd,
.mkCont pre,
.mkCont samp {
    width: 100%;
    border: 1px solid olivedrab;
    background-color: $baseBgColor;
    padding: 0;
}

.txtFieldLabelShort {
    margin-right: .25rem;
}

.txtFieldLabel {
    margin-right: .25rem;
    margin-top: 1rem;
}

.formGrpBorder {
    border: 1px solid $gray-600;
}

.editPropsCont {
    background-color: #17202A;
    border: 1px solid $gray-600;
    margin-bottom: $smallGap;
}

.editPropsTable {
    padding-left: $smallGap;
    width: 100%;
}

.splitNodeRadioButtonGroup {
    padding: $smallGap;
    margin-bottom: $smallGap;
}

.propsPanelExpanded {}

.propsPanelCollapsed {}

.scrollingPropsTable {
    width: 100%;
    overflow-x: auto;
    margin-left: $smallGap;
    margin-bottom: $smallGap;
}

.delAttachmentButton {
    margin-top: $tinyGap;
    margin-right: $tinyGap;
}

.delAttCheckbox {
    margin-right: 0 !important;
}

.attachmentLinkGroup {
    margin-left: 20px;
}

.selectOption {
    font-size: 120%;
}

.formSelect {
    border: 1px solid gray !important;
    padding: 5px 5px 5px 10px;
}

.validationError {
    color: #E74C3C;
    margin-bottom: 0;
}

.validationErrorBorder {
    border: 2px solid #E74C3C;
}

.editorTagsSection {
    margin-top: $smallGap;
}

.tagsFlexContainer {
    display: flex;
    flex-wrap: wrap;
}

.propsList {}

.propsListItemCheckBox {
    vertical-align: middle;
    margin-left: $microGap;
    margin-right: 0 !important;
}

.propertyTable {}

.propTableRow {
    width: 100%;
}

.propTableNameCol {
    width: 25%;
    background-color: darkolivegreen;
}

.propTableValCol {
    width: 70%;
}

.binaryEditorSection {
    border: 1px solid gray;
    margin-bottom: $smallGap;
    margin-top: $tinyGap;
    padding: $smallGap;
    background-color: #17202A;
}

.binaryEditorItem {
    padding-bottom: $microGap;
}

.binaryEditorItem {
    &:not(:last-child) {
        border-bottom: 1px solid $gray-700;
        margin-bottom: $tinyGap;
    }
}

.dateField {
    font-family: "monospace";
}

.timeField {
    font-family: "monospace";
}

.tagsPrompt {
    width: 4em;
    margin-right: $smallGap;
    text-align: right;
}

.linksPrompt {
    width: 4em;
    margin-right: $smallGap;
    text-align: right;
}

.fieldDisplayCell {
    border-left: 4px solid $nodeBorderBottomColor;
    border-bottom: 1px dotted $nodeBorderBottomColor;
}

.contentEditor {
    width: 100%;
}

.editTypesPanelHeader {
    margin: $tinyGap 0 0 $smallGap;
}

.selectLabel {
    margin-right: 6px;
}

.widthDropDown {
    display: inline-block;
    margin-right: $smallGap;
    margin-left: $smallGap;
    width: 6rem;
}

.positionDropDown {
    display: inline-block;
    margin-right: $smallGap;
    width: 7rem;
}

.flexPropsEditPanel {
    display: flex;
    flex-wrap: wrap;
}

.flexPropsDisplayPanel {
    display: flex;
    flex-wrap: wrap;
}

.linksPanelInEditor {
    display: flex;
    flex-wrap: wrap;
}

.durationTypeInput {
    max-width: 5rem;
    margin-left: $smallGap;
}

.layoutSelection {
    max-width: 14rem;
    margin-right: 1rem;
}

.sharingDisplayName {
    display: inline-block;
    padding: $smallGap;
    cursor: pointer;
}

.propNameInList {
    display: inline-block;
    margin: $tinyGap;
}

.propRangesInList {
    display: inline-block;
    margin: $tinyGap;
}

.ipfsPinnedCheckbox {
    margin-left: 24px;
}

